/*
 * This file is generated by jOOQ.
 */
package dev.limelier.tables.records


import dev.limelier.tables.Sessions

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SessionsRecord() : UpdatableRecordImpl<SessionsRecord>(Sessions.SESSIONS), Record4<Int?, Long?, OffsetDateTime?, OffsetDateTime?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var userId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var start: OffsetDateTime?
        set(value): Unit = set(2, value)
        get(): OffsetDateTime? = get(2) as OffsetDateTime?

    open var end: OffsetDateTime?
        set(value): Unit = set(3, value)
        get(): OffsetDateTime? = get(3) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, Long?, OffsetDateTime?, OffsetDateTime?> = super.fieldsRow() as Row4<Int?, Long?, OffsetDateTime?, OffsetDateTime?>
    override fun valuesRow(): Row4<Int?, Long?, OffsetDateTime?, OffsetDateTime?> = super.valuesRow() as Row4<Int?, Long?, OffsetDateTime?, OffsetDateTime?>
    override fun field1(): Field<Int?> = Sessions.SESSIONS.ID
    override fun field2(): Field<Long?> = Sessions.SESSIONS.USER_ID
    override fun field3(): Field<OffsetDateTime?> = Sessions.SESSIONS.START
    override fun field4(): Field<OffsetDateTime?> = Sessions.SESSIONS.END
    override fun component1(): Int? = id
    override fun component2(): Long? = userId
    override fun component3(): OffsetDateTime? = start
    override fun component4(): OffsetDateTime? = end
    override fun value1(): Int? = id
    override fun value2(): Long? = userId
    override fun value3(): OffsetDateTime? = start
    override fun value4(): OffsetDateTime? = end

    override fun value1(value: Int?): SessionsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): SessionsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: OffsetDateTime?): SessionsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: OffsetDateTime?): SessionsRecord {
        set(3, value)
        return this
    }

    override fun values(value1: Int?, value2: Long?, value3: OffsetDateTime?, value4: OffsetDateTime?): SessionsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised SessionsRecord
     */
    constructor(id: Int? = null, userId: Long? = null, start: OffsetDateTime? = null, end: OffsetDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.start = start
        this.end = end
        resetChangedOnNotNull()
    }
}
